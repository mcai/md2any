#!/usr/bin/env python3
import os
from json import loads

import jinja2
from markdown2 import markdown

from bs4 import BeautifulSoup
from bs4.element import Tag, NavigableString

from argparse import ArgumentParser

from io import StringIO

md_jinja_env = latex_jinja_env = jinja2.Environment(
    block_start_string='\BLOCK{',
    block_end_string='}',
    variable_start_string='\VAR{',
    variable_end_string='}',
    comment_start_string='\#{',
    comment_end_string='}',
    line_statement_prefix='%%',
    line_comment_prefix='%#',
    trim_blocks=True,
    autoescape=False,
    loader=jinja2.FileSystemLoader(os.getcwd() + os.sep)
)


class TreeOfContents:
    source_type = BeautifulSoup
    valid_tags = ('a', 'abbr', 'address', 'area', 'article', 'aside', 'audio',
                  'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button',
                  'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data',
                  'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt',
                  'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form',
                  'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr',
                  'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label',
                  'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem',
                  'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup',
                  'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q',
                  'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small',
                  'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table',
                  'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time',
                  'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr')
    allowed_attrs = ('string', 'stripped_strings', 'name')

    def __init__(self, branches=(), descendants=(), source=None, level=None):
        assert source is not None, 'NoneType source passed into TreeOfContents'
        self.source = source
        self.level = level or self.parse_top_level()
        self.descendants = descendants or self.expand_descendants(branches)
        self.branches = branches or self.parse_branches(descendants)

    @staticmethod
    def get_heading_level(bs):
        try:
            return int(bs.name[1])
        except (ValueError, IndexError, TypeError):
            return None

    def parse_top_level(self):
        for i in range(1, 7):
            if getattr(self.source, 'h%d' % i):
                return i

    def expand_descendants(self, branches):
        return sum([b.descendants() for b in branches], []) + [b.source for b in branches]

    def parse_branches(self, descendants):
        branches, parent, cond = [], False, lambda b: not isinstance(b, NavigableString) or b.string.strip()
        for descendant in filter(cond, descendants):
            level = self.get_heading_level(descendant)

            if level == self.level:
                branches.append({'source': descendant})
                parent = True
            elif not parent:
                branches.append({'source': descendant})
            else:
                branches[-1].setdefault('descendants', []).append(descendant)
        return [TOC(level=self.level + 1, **kwargs) for kwargs in branches]

    def __getattr__(self, attr, *default):
        tag = attr[:-1]
        if attr in self.allowed_attrs:
            return getattr(self.source, attr, *default)
        if attr in self.valid_tags:
            return next(filter(lambda t: t.name == attr, self.branches), None)
        if len(default):
            return default[0]
        if attr[-1] == 's' and tag in self.valid_tags:
            return filter(lambda t: t.name == tag, self.branches)
        raise AttributeError("'TreeOfContents' object has no attribute '%s'" % attr)

    def __repr__(self):
        return str(self)

    def __str__(self):
        if isinstance(self.source, NavigableString):
            return self.string or ''
        else:
            return '\r\n'.join(self.stripped_strings) or ''

    def __iter__(self):
        return iter(self.branches)

    def __getitem__(self, i):
        return self.branches[i]

    @staticmethod
    def from_html(html, *args, **kwargs):
        source = BeautifulSoup(html, 'html.parser', *args, **kwargs)
        return TOC(source=source, descendants=source.children)


TOC = TreeOfContents


class Root:
    def __init__(self, title='', author='', lang='en', latex_documentclass='article', bib=''):
        self.title = title
        self.author = author
        self.lang = lang
        self.latex_documentclass = latex_documentclass
        self.bib = bib
        self.children = []

    def __repr__(self):
        return self.title


class Heading1:
    def __init__(self, text, numbering=True):
        self.text = text
        self.numbering = numbering
        self.abstract = False
        self.children = []

    def __repr__(self):
        return self.text


class Heading2:
    def __init__(self, text, numbering=True):
        self.text = text
        self.numbering = numbering
        self.children = []

    def __repr__(self):
        return self.text


class Heading3:
    def __init__(self, text, numbering=True):
        self.text = text
        self.numbering = numbering
        self.children = []

    def __repr__(self):
        return self.text


class Heading4:
    def __init__(self, text, numbering=True):
        self.text = text
        self.numbering = numbering
        self.children = []

    def __repr__(self):
        return self.text


class Heading5:
    def __init__(self, text, numbering=True):
        self.text = text
        self.numbering = numbering
        self.children = []

    def __repr__(self):
        return self.text


class Paragraph:
    def __init__(self, text):
        self.text = text
        self.children = []

    def __repr__(self):
        return self.text


class OrderedList:
    def __init__(self):
        self.children = []

    def __repr__(self):
        return ', '.join([c.text for c in self.children])


class UnorderedList:
    def __init__(self):
        self.children = []

    def __repr__(self):
        return ', '.join([c.text for c in self.children])


class ListItem:
    def __init__(self, text):
        self.text = text
        self.children = []

    def __repr__(self):
        return self.text


def parse(filename):
    def numbering(text):
        def cond(s):
            return s.lower() in text.lower()

        return not any(cond(s) for s in ['abstract', '摘要', 'references', '参考文献', 'acknowledgements', '致谢'])

    with open(filename, 'r', encoding='UTF-8') as i:
        md = i.read()

    with open(filename + '.meta.json', 'r', encoding='UTF-8') as i:
        metadata = loads(i.read())

    tpl = md_jinja_env.from_string(md)

    md = tpl.render(**metadata)

    html = markdown(md, extras=['code-color', 'fenced-code-blocks', 'tables'])

    toc = TreeOfContents.from_html(html)

    def visit_toc(toc, parent):
        if type(toc.source) is Tag:
            yield toc.source, parent.source

        for b in toc.branches:
            yield from visit_toc(b, toc)

    root = Root(**metadata)

    def abstract(text):
        def cond(s):
            return s.lower() in text.lower()

        return any(cond(s) for s in ['abstract', '摘要'])

    mappings = {
        toc.source: root
    }

    for c, container in visit_toc(toc, toc):
        if type(c) is Tag:
            if c.name == 'h1':
                h1 = Heading1(c.text, numbering=numbering(c.text))

                if abstract(h1.text):
                    h1.abstract = True

                mappings[c] = h1
                mappings[container].children.append(h1)
            elif c.name == 'h2':
                h2 = Heading2(c.text, numbering=numbering(c.text))
                mappings[c] = h2
                mappings[container].children.append(h2)
            elif c.name == 'h3':
                h3 = Heading3(c.text, numbering=numbering(c.text))
                mappings[c] = h3
                mappings[container].children.append(h3)
            elif c.name == 'h4':
                h4 = Heading4(c.text, numbering=numbering(c.text))
                mappings[c] = h4
                mappings[container].children.append(h4)
            elif c.name == 'h5':
                h5 = Heading5(c.text, numbering=numbering(c.text))
                mappings[c] = h5
                mappings[container].children.append(h5)
            elif c.name == 'p':
                p = Paragraph(c.text)
                mappings[c] = p
                mappings[container].children.append(p)
            elif c.name == 'ol':
                ol = OrderedList()
                for i, li in enumerate(c.find_all('li')):
                    ol.children.append(ListItem(li.text))
                mappings[c] = ol
                mappings[container].children.append(ol)
            elif c.name == 'ul':
                ul = UnorderedList()
                for li in c.find_all('li'):
                    ul.children.append(ListItem(li.text))
                mappings[c] = ul
                mappings[container].children.append(ul)
            else:
                p = Paragraph(str(c))
                mappings[c] = p
                mappings[container].children.append(p)

    return root


def visit_root(root, container):
    yield root, container

    for c in root.children:
        yield from visit_root(c, root)


def to_xetex(root, output_tex_filename):
    latex_template_filename = os.path.dirname(os.path.abspath(__file__)) + '/template.tex'

    with open(latex_template_filename, 'r', encoding='UTF-8') as i:
        latex_template = i.read()

    tpl = latex_jinja_env.from_string(latex_template)

    s = StringIO()

    for c, container in visit_root(root, root):
        if type(c) is Root:
            pass
        elif type(c) is Heading1:
            s.write('\section{}{{{}}}\n\n'.format('*' if not c.numbering else '', c.text))
        elif type(c) is Heading2:
            s.write('\subsection{}{{{}}}\n\n'.format('*' if not c.numbering else '', c.text))
        elif type(c) is Heading3:
            s.write('\subsubsection{}{{{}}}\n\n'.format('*' if not c.numbering else '', c.text))
        elif type(c) is Heading4:
            s.write('\paragraph{}{{{}}}\n\n'.format('*' if not c.numbering else '', c.text))
        elif type(c) is Heading5:
            s.write('\subparagraph{}{{{}}}\n\n'.format('*' if not c.numbering else '', c.text))
        elif type(c) is Paragraph:
            s.write(c.text + '\n\n')
        elif type(c) is OrderedList:
            s.write('\\begin{enumerate}\n\n')
            for i, li in enumerate([e for e in c.children if type(e) is ListItem]):
                s.write('\\item {}\n\n'.format(li.text))
            s.write('\end{enumerate}\n\n')
        elif type(c) is UnorderedList:
            s.write('\\begin{itemize}\n\n')
            for li in [e for e in c.children if type(e) is ListItem]:
                s.write('\item {}\n\n'.format(li.text))
            s.write('\end{itemize}\n\n')
        elif type(c) is ListItem:
            pass
        else:
            s.write('{} {}'.format(type(c), str(c)) + '\n\n')

    latex = tpl.render(title=root.title, author=root.author, institution='', body=s.getvalue(), bib=root.bib, lang=root.lang, latex_documentclass=root.latex_documentclass)

    with open(output_tex_filename + '.tex', 'w', encoding='utf-8') as o:
        o.write(latex)


def to_docx(root, output_docx_filename):
    from docx import Document as Docx
    from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
    from docx.shared import Inches

    docx = Docx()

    style_indent = next(filter(lambda s: s.name == 'Normal', docx.styles))
    paragraph_format = style_indent.paragraph_format
    paragraph_format.first_line_indent = Inches(0.25)
    paragraph_format.space_before = 1
    paragraph_format.line_spacing = 1.5
    paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY

    docx.add_heading('{}'.format(root.title), 0)

    h1 = 0
    h2 = 0
    h3 = 0
    h4 = 0
    h5 = 0

    for c, container in visit_root(root, root):
        if type(c) is Root:
            pass
        elif type(c) is Heading1:
            if c.numbering:
                h1 += 1
            h2 = 0

            docx.add_page_break()

            if c.numbering:
                docx.add_heading('{} {}'.format(h1, c.text), 1)
            else:
                docx.add_heading('{}'.format(c.text), 1)
        elif type(c) is Heading2:
            h2 += 1
            h3 = 0
            docx.add_heading('{}.{} {}'.format(h1, h2, c.text), 2)
        elif type(c) is Heading3:
            h3 += 1
            h4 = 0
            docx.add_heading('{}.{}.{} {}'.format(h1, h2, h3, c.text), 3)
        elif type(c) is Heading4:
            h4 += 1
            h5 = 0
            docx.add_heading('{}.{}.{}.{} {}'.format(h1, h2, h3, h4, c.text), 4)
        elif type(c) is Heading5:
            h5 += 1
            docx.add_heading('{}.{}.{}.{}.{} {}'.format(h1, h2, h3, h4, h5, c.text), 4)
        elif type(c) is Paragraph:
            docx.add_paragraph(c.text)
        elif type(c) is OrderedList:
            for i, li in enumerate([e for e in c.children if type(e) is ListItem]):
                docx.add_paragraph('{}. {}'.format(i + 1, li.text))
        elif type(c) is UnorderedList:
            for i, li in enumerate([e for e in c.children if type(e) is ListItem]):
                docx.add_paragraph('* {}'.format(li.text))
        elif type(c) is ListItem:
            pass
        else:
            docx.add_paragraph('{} {}'.format(type(c), str(c)))

    docx.save(output_docx_filename)


def convert(filename):
    doc = parse(filename)
    to_xetex(doc, filename)
    to_docx(doc, filename + '.docx')


if __name__ == '__main__':
    arg_parser = ArgumentParser()
    arg_parser.add_argument('md_file', type=str)

    args = arg_parser.parse_args()

    convert(args.md_file)
